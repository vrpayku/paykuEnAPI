openapi: 3.0.0
servers:
  - url: "https://app.payku.cl/"
    description: Default server
  - url: "https://[base URL]/"
    description: Sandbox server
info:
  description: |
    Select the language of the documentation: <a href="https://docs.payku.cl/">ES</a> | EN

    # Introduction
    Welcome to the Payku API. You can use our API to access the different
    Payku endpoints, where you can generate and manage payments through different
    methods and get information from them.

    The API is organized around REST. It has predictable URLs and resource-oriented,
    and uses HTTP response codes to indicate the result of the call. All API 
    responses return objects JSON, including errors.

    User should look for a 200 result code. If received any result code other 
    than 200, the request, or the response is invalid, which means that the fields 
    did not pass the checks of validation from payku. We use features included in
    the HTTP protocol, such as authentication, which are supported by the most HTTP 
    clients.

    # Authentication
    Payku uses Token Based Authentication over HTTPS for authentication. To have 
    access to our API, access your account in the section of Integration you will 
    find the option of integration and API tokens. The request Unauthenticated or 
    incorrect will return an Invalid token response.

    # API Security 
    Each request is required to have included in the header:
      - Authorization: Bearer **TOKEN-PÃšBLICO**

    # Signature
    In the case of the subscription and Mall API, an additional layer of security was added 
    through of a signature that is sent in the request header, to obtain said signature
    is necessary the following:

    The Request Path must be concatenated in url format along with all the request 
    parameters, which must be ordered alphabetically by key, such that key = value. 
    Therefore, if the client email value is "example@domain.com" the correct format 
    would be "example% 40domain.com" and then concatenated with the character '&'.

    Once the character sets are ordered and concatenated, the hash is calculated 
    using the HMAC function with encryption type sha256, and the private token.

    ### PHP Example
    API Endpoint:
    ```php
    $request_path = urlencode('/api/transaction')
    ```
    Sorting the parameters:
    ```php
    $data = [
      'email' => 'joedoe@gmail.com',     
      'urlreturn' => 'https://youwebsite.com/urlreturn?orderClient=123',     
      'urlnotify' => 'https://youwebsite.com/urlnotify?orderClient=123',     
      'order' =>  1234,     
      'subject'  => 'order description test',     
      'amount' => 98745,     
      'payment' => 1
    ];
    ksort($data);
    ```
    Transformation of the parameters to url format:
    ```php
    $i = count($data);
    $array_concat = null;
    foreach ($data as $key => $val) {
        $array_concat .= $key . '=' . urlencode($val);
        $last_iteration = !(--$i);
        if (!$last_iteration) {
            $array_concat .= '&';
      }
    }
    ```
    Concatenation of the parameters in url format with the API endpoint:
    ```php
    $concat = $request_path.'&'.$array_concat
    ```
    Sign:
    ```php
    $sign = hash_hmac('sha256', $concat, '79c5481cffd3ecbd0c8ade5e5b5fc2c6'),
    ```

    ### JavaScript Example
    Import CryptoJS dependency:
    ```javascript
    const CryptoJS = require("crypto-js");
    ```
    API Endpoint:
    ```javascript
    const requestPath = encodeURIComponent('/api/transaction');
    ```
    Sorting the parameters:
    ```javascript
    const data = {
      email: 'joedoe@gmail.com',     
      urlreturn: 'https://youwebsite.com/urlreturn?orderClient=123',     
      urlnotify: 'https://youwebsite.com/urlnotify?orderClient=123',     
      order:  1234,     
      subject: 'order description test',     
      amount: 98745,     
      payment: 1
    };
    const orderedData = {};
    Object.keys(data).sort().forEach(function(key) {
      orderedData[key] = data[key];
    });
    ```
    Transformation of the parameters to url format:
    ```javascript
    const arrayConcat = new URLSearchParams(orderedData).toString();
    ```
    Concatenation of the parameters in url format with the API endpoint:
    ```javascript
    const concat = requestPath + "&" + arrayConcat;
    ```
    Sign:
    ```javascript
    const sign = CryptoJS.HmacSHA256(concat, "79c5481cffd3ecbd0c8ade5e5b5fc2c6").toString();
    ```

    The result of the signature obtained for both examples is:

    ```javascript
    "61e2ddcb4e01cf9bc9cc0c87c8a0112265f5001ecf693d12a410e2e8885fd31d"
    ```

    # Errors
    Payku uses conventional HTTP responses to indicate the success or failure of a request.
    In general, codes in the 2xx range indicate success, codes in the 4xx range indicate
    an error that failed due to the information provided (ex: a required parameter was
    skipped, a payment failed, etc.), and codes in the 5xx range indicate an error with
    Payku servers (these are rare).

    ## Error codes
    <div class="errorContent">
    <table>
      <tbody>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">400</strong>
            <p class="psmall">Bad Request</p>
          </td>
          <td class="errorDescription">There is a problem with your request</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">401</strong>
            <p class="psmall">Unauthorized</p>
          </td>
          <td class="errorDescription">Your token is incorrect</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">403</strong>
            <p class="psmall">Forbidden</p>
          </td>
          <td class="errorDescription">You do not have permission to view this page</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">404</strong>
            <p class="psmall">Not Found</p>
          </td>
          <td class="errorDescription">The specified resource was not found</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">405</strong>
            <p class="psmall">Method Not Allowed</p>
          </td>
          <td class="errorDescription">You tried to enter a resource with an invalid method</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">406</strong>
            <p class="psmall">Not Acceptable</p>
          </td>
          <td class="errorDescription">You requested a format other than JSON</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">410</strong>
            <p class="psmall">Gone</p>
          </td>
          <td class="errorDescription">The requested resource was removed from our servers</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">422</strong>
            <p class="psmall">Unprocessable Entity</p>
          </td>
          <td class="errorDescription">We cannot process your request, please review it.</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">429</strong>
            <p class="psmall">Too Many Requests</p>
          </td>
          <td class="errorDescription">You are requesting a lot of resources! Stop!</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">500</strong>
            <p class="psmall">Internal Server Error</p>
          </td>
          <td class="errorDescription">We had a problem with our server. Please try again later.</td>
        </tr>
        <tr>
          <td style="text-align: right"><strong class="errorTitle">503</strong>
            <p class="psmall">Service Unavailable</p>
          </td>
          <td class="errorDescription">We are offline for maintenance. Please try again later.</td>
        </tr>
      </tbody>
    </table>
    </div>


    # API access
    If you have a payku account, you can access the REST API through the following endpoints:

    <div class="content">
      <table class="center smallTable">
        <thead>
          <tr>
            <th style="text-align:center;"><strong>Site</strong></th>
            <th style="text-align:center;"><strong>BASE URL FOR REST ENDPOINT</strong></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><strong>Production</strong></td>
            <td align="center"><a href="https://app.payku.cl/api">https://app.payku.cl/api</a></td>
          </tr>
          <tr>
            <td><strong>Sandbox</strong></td>
            <td><a href="https://des.payku.cl/api">https://des.payku.cl/api</a></td>
          </tr>
        </tbody>
      </table>
    </div>

    -	Production: provides direct access to generate actual transactions.
    - Sandbox: allows you to test your integration without affecting the actual data.

    # Test transactions with Webpay

    For Webpay transactions in this environment these cards must be used:

    <div class="content">
      <table class="center">
        <thead>
          <tr>
            <th style="text-align:center; width:25%"><strong>Card type</strong></th>
            <th style="text-align:center; width:37.5%"><strong>Description</strong></th>
            <th style="text-align:center; width:37.5%"><strong>Result</strong></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>VISA</td>
            <td align="center">4051 8856 0044 6623 CVV 123 any expiration date</td>
            <td align="center">Generate approved transactions.</td>
          </tr>
          <tr>
            <td>MASTERCARD</td>
            <td align="center">5186 0595 5959 0568 CVV 123 any expiration date</td>
            <td align="center">Generate declined transactions.</td>
          </tr>
          <tr>
            <td>Redcompra</td>
            <td>4051 8842 3993 7763</td>
            <td align="center">Generates approved transactions (for operations that allow Redcompra debit and prepayment)</td>
          </tr>
          <tr>
            <td>Redcompra</td>
            <td>5186 0085 4123 3829</td>
            <td align="center">Generates rejected transactions (for operations that allow Redcompra debit and prepayment)</td>
          </tr>
        </tbody>
      </table>
    </div>

    When the authentication form with RUT and password appears, RUT 11.111.111-1 and password 123 must be used.

  version: "1.0.0"
  title: Payku API
  termsOfService: "https://payku.cl/legal/"
  contact:
    email: contacto@payku.cl
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://storage.googleapis.com/storage-payku-prd/public/img/payku2020_2.svg"
tags:
  - name: Transaction
    description: It allows the creation of transactions and later check their status.
  - name: Marketplace
    description: It allows the registration of clients, to later carry out the distribution according to the assigned percentage.
  - name: Subscription
    description: It allows the linking of a plan to Clients, to later make recurring charges automatically, as defined in each plan.
  - name: Consumption Subscription
    description: |
      It is the set of methods that will allow our users to create clients, plans, subscriptions and carry out consumer plan transactions.

      The main use of these methods is to make one-time charges to a customer for a service or product, such as hiring a delivery service for a product or the purchase of a particular product.
  - name: Event
    description: It allows the creation of events and later check their status.

paths:
  /api/suclient/:
    post:
      tags:
        - Consumption Subscription
      summary: Insert data to a Client
      description: This method allows the insertion of Client data.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminClientResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/suclient \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "email": "joedoe@gmail.com",
                "name": "Joe Doe",
                "phone": "923122312",
                "address": "Moneda 101",
                "country": "Chile",
                "region": "Metropolitana",
                "city": "Santiago",
                "postal_code": "850000
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/suclient', [
                'json' => [                
                  'email' => 'joedoe@gmail.cl', 
                  'name' => 'Joe Doe', 
                  'phone' => '923122312', 
                  'address' => 'Moneda 101', 
                  'country' => 'Chile', 
                  'region' => 'Metropolitana', 
                  'city' => 'Santiago', 
                  'postal_code' => '850000',
                  ],  
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/suclient', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              email: "joedoe@gmail.com",
              name: "Joe Doe",
              phone: "923122312",
              address: "Moneda 101",
              country: "Chile",
              region: "Metropolitana",
              city: "Santiago",
              postal_code: "850000"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Client email.
                  type: string
                  format: email
                  example: joedoe@gmail.com
                name:
                  description: Client name
                  type: string
                  example: "Joe Doe"
                phone:
                  description: Client phone.
                  type: string
                  example: "923122312"
                address:
                  description: Client address.
                  type: string
                  example: "Moneda 101"
                country:
                  description: Client country.
                  type: string
                  example: "Chile"
                region:
                  description: Client region.
                  type: string
                  example: "Metropolitana"
                city:
                  description: Client city.
                  type: string
                  example: "Santiago"
                postal_code:
                  description: Client Zip Code.
                  type: string
                  example: "850000"
              required:
                - email
                - name
                - phone

  /api/suplan/:
    post:
      tags:
        - Consumption Subscription
      summary: Insert the data of a plan.
      description: This method allows the insertion of data for the creation of a plan.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/suplan \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "name": "Test plan",
                "description": "Test Plan"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https:// [base URL]/api/suplan', [             
                'json' => [       
                  'name' => 'Test plan',    
                  'description' => 'Test Plan'         
                  ],             
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              ]           
                  ])->getBody();           
                $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/suplan', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              name: "Test plan",
              description: "Test Plan"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Plan name.
                  type: string
                  example: Test plan
                description:
                  description: Plan description.
                  type: string
                  example: Test Plan
              required:
                - name

  /api/sususcription/:
    post:
      tags:
        - Consumption Subscription
      summary: Insert data for subscription
      description: This method allows the user of a Payku account to generate a subscription to a subscription plan of a fixed amount or subscription to a consumer plan to one of its clients, it is important to note that when making this request for the first time, a charge of $50 will be made. It will allow verifying that the card is active and valid, in the case of a fixed subscription plan the service charge will be automatic from the month following the subscription date and in the case that the subscription is to a consumer plan it will be necessary to use the api/sutransaction endpoint to generate the transaction.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSuscriptionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/sususcription \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "plan": "pl9697fb170834ad42dd00",
                "client": "cl9b1e1dd988694f30fa30"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/ sususcription, [             
                'json' => [                
                  'plan' => 'pl9697fb170834ad42dd00', 
                  'client' => ' cl9b1e1dd988694f30fa30',
                  ], 
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                  ]           
                ])->getBody();           
              $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/sususcription', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              plan: "pl9697fb170834ad42dd00",
              client: "cl9b1e1dd988694f30fa30",
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  description: Plan id.
                  type: string
                  example: pl9697fb170834ad42dd00
                client:
                  description: Client id.
                  type: string
                  example: cl9b1e1dd988694f30fa30
              required:
                - plan
                - client

  /api/sutransaction/:
    post:
      tags:
        - Consumption Subscription
      summary: Insert data for the transaction
      description: This method allows the user of a Payku account to generate a unique transaction to one of his clients who are subscribed to a consumption plan.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSuTransactionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/sutransaction \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "suscription": "sucaab7865dceaff49d8b3",
                "amount": "10000",
                "order": "001",
                "description": "DescripciÃ³n"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/sutransaction, [             
                'json' => [                
                  'suscription' => sucaab7865dceaff49d8b3, 
                  'order' => '001', 
                  'monto' => '10000', 
                  'description' => ' descripcion'
                  ], 
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                  ]           
                ])->getBody();           
              $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/sutransaction', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              suscription: "sucaab7865dceaff49d8b3",
              amount: "10000",
              order: "001",
              description: "DescripciÃ³n"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                suscription:
                  description: Unique subscription identifier for payku.
                  type: string
                  example: sucaab7865dceaff49d8b3
                amount:
                  description: Amount.
                  type: string
                  example: "10000"
                order:
                  description: Order.
                  type: string
                  example: "001"
                description:
                  description: Description.
                  type: string
                  example: Description
              required:
                - suscription

  /api/suclient:
    post:
      tags:
        - Subscription
      summary: Insert data to a Client
      description: This method allows the insertion of Client data.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminClientResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/suclient \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "email": "joedoe@gmail.com",
                "name": "Joe Doe",
                "phone": "923122312",
                "address": "Moneda 101",
                "country": "Chile",
                "region": "Metropolitana",
                "city": "Santiago",
                "postal_code": "850000
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/suclient', [
                'json' => [                
                  'email' => 'joedoe@gmail.cl', 
                  'name' => 'Joe Doe', 
                  'phone' => '923122312', 
                  'address' => 'Moneda 101', 
                  'country' => 'Chile', 
                  'region' => 'Metropolitana', 
                  'city' => 'Santiago', 
                  'postal_code' => '850000',
                  ],  
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/suclient', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              email: "joedoe@gmail.com",
              name: "Joe Doe",
              phone: "923122312",
              address: "Moneda 101",
              country: "Chile",
              region: "Metropolitana",
              city: "Santiago",
              postal_code: "850000"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Client email.
                  type: string
                  format: email
                  example: joedoe@gmail.com
                name:
                  description: Client name
                  type: string
                  example: "Joe Doe"
                phone:
                  description: Client phone.
                  type: string
                  example: "923122312"
                address:
                  description: Client address.
                  type: string
                  example: "Moneda 101"
                country:
                  description: Client country.
                  type: string
                  example: "Chile"
                region:
                  description: Client region.
                  type: string
                  example: "Metropolitana"
                city:
                  description: Client city.
                  type: string
                  example: "Santiago"
                postal_code:
                  description: Client Zip Code.
                  type: string
                  example: "850000"
              required:
                - email
                - name
                - phone

  /api/suclient/{idClient}:
    get:
      tags:
        - Subscription
      summary: Query Client data
      description: This method allows obtaining the details of a client.
      operationId: getClientById
      parameters:
        - name: id
          in: path
          description: Unique transaction identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientIdResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/suclient/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/suclient/cla90927fa9b30e1dfffa0', [                    
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/suclient/cla90927fa9b30e1dfffa0', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

    put:
      tags:
        - Subscription
      summary: Update Client data
      description: This method allows updating a Client's data.
      operationId: putSuscriptionById
      parameters:
        - name: id
          in: path
          description: Unique transaction identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModifyClientResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X PUT \
            https://BASE_URL/api/suclient/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "email": "joedoe@gmail.com",
                "name": "Joe Doe Doe",
                "phone": "923122312",
                "address": "Moneda 121",
                "country": "Chile",
                "region": "Metropolitana",
                "city": "Santiago",
                "postal_code": "750000"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('PUT', 'https://[base URL]//api/suclient/cla90927fa9b30e1dfffa0', [             
                'json' => [          
                  'email' => 'joedoe@gmail.com', 
                  'name' => 'Joe Doe Doe', 
                  'phone' => '923122312', 
                  'address' => 'Moneda 121', 
                  'country' => 'Chile', 
                  'region'  => 'Metropolitana', 
                  'city'    => 'Santiago', 
                  'postal_code' => '750000',
                ],  
              ],             
              'headers' => [                 
                'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
              ]           
            ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/suclient', {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              email: "joedoe@gmail.com",
              name: "Joe Doe Doe",
              phone: "923122312",
              address: "Moneda 121",
              country: "Chile",
              region: "Metropolitana",
              city: "Santiago",
              postal_code: "750000"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Client email.
                  type: string
                  format: email
                  example: joedoe@gmail.com
                name:
                  description: Client name
                  type: string
                  example: "Joe Doe Doe"
                phone:
                  description: Client phone.
                  type: string
                  example: "923122312"
                address:
                  description: Client address.
                  type: string
                  example: "Moneda 121"
                country:
                  description: Client country.
                  type: string
                  example: "Chile"
                region:
                  description: Client region.
                  type: string
                  example: "Metropolitana"
                city:
                  description: Client city.
                  type: string
                  example: "Santiago"
                postal_code:
                  description: Client Zip Code.
                  type: string
                  example: "750000"

    delete:
      tags:
        - Subscription
      summary: Delete Client
      description: This method allows the elimination of a client associated with a user id.
      operationId: deleteClientById
      parameters:
        - name: id
          in: path
          description: Unique transaction identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteClientResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X DELETE \
            https://BASE_URL/api/suclient/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('DELETE', 'https:// [base URL]/api/suclient/cla90927fa9b30e1dfffa0', [             
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              ]           
                  ])->getBody();           
                $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/suclient/cla90927fa9b30e1dfffa0', {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

  /api/suclient/customers:
    get:
      tags:
        - Subscription
      summary: Get all Clients
      description: This method allows to obtain all Clients.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModifyClientResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/suclient/customers \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/suclient/customers', [                      
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/suclient/customers', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

  /api/sususcription:
    post:
      tags:
        - Subscription
      summary: Insert data for subscription
      description: This method allows the user of a Payku account to generate a subscription to a subscription plan of a fixed amount or subscription to a consumer plan to one of its clients, it is important to note that when making this request for the first time, a charge of $50 will be made. It will allow verifying that the card is active and valid, in the case of a fixed subscription plan the service charge will be automatic from the month following the subscription date and in the case that the subscription is to a consumer plan it will be necessary to use the api/sutransaction endpoint to generate the transaction.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSuscriptionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/sususcription \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "plan": "pl9697fb170834ad42dd00",
                "client": "cl9b1e1dd988694f30fa30"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/sususcription, [             
                'json' => [                
                  'plan' => 'pl9697fb170834ad42dd00', 
                  'client' => ' cl9b1e1dd988694f30fa30',
                  ], 
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                  ]           
                ])->getBody();           
              $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/sususcription', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              plan: "pl9697fb170834ad42dd00",
              client: "cl9b1e1dd988694f30fa30",
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  description: Plan id.
                  type: string
                  example: pl9697fb170834ad42dd00
                client:
                  description: Client id.
                  type: string
                  example: cl9b1e1dd988694f30fa30
              required:
                - plan
                - client

    get:
      tags:
        - Subscription
      summary: Get all subscriptions
      description: This method allows obtaining all the subscriptions associated with a user ID, this method allows a pagination with a maximum of 100 records per page, in addition, it has a date filter, if this parameter is not entered, the current date will be taken, for the pagination, it is necessary to add the following at the end of the endpoint? page = 1 & per_page = 100, the first parameter being the number of the page and the second the number of records per page.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SuscriptionAllResponse"
        "400":
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Token PÃºblico incorrecto.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/suclient/customers \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/suclient/customers', [                      
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/suclient/customers', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

  /api/sutransaction:
    post:
      tags:
        - Subscription
      summary: Insert data for the transaction
      description: This method allows the user of a Payku account to generate a unique transaction to one of his clients who are subscribed to a consumption plan.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSuTransactionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/sutransaction \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "suscription": "sucaab7865dceaff49d8b3",
                "amount": "10000",
                "order": "001",
                "description": "DescripciÃ³n"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/sutransaction, [             
                'json' => [                
                  'suscription' => sucaab7865dceaff49d8b3, 
                  'order' => '001', 
                  'monto' => '10000', 
                  'description' => ' descripcion'
                  ], 
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                  ]           
                ])->getBody();           
              $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/sutransaction', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              suscription: "sucaab7865dceaff49d8b3",
              amount: "10000",
              order: "001",
              description: "DescripciÃ³n"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                suscription:
                  description: Unique subscription identifier for payku.
                  type: string
                  example: sucaab7865dceaff49d8b3
                amount:
                  description: Amount.
                  type: string
                  example: "10000"
                order:
                  description: Order.
                  type: string
                  example: "001"
                description:
                  description: Description.
                  type: string
                  example: DescripciÃ³n
              required:
                - suscription

  /api/sususcription/{idSuscription}:
    get:
      tags:
        - Subscription
      summary: Check subscription data
      description: This method allows you to get the details of a subscription.
      operationId: getSuscriptionById
      parameters:
        - name: id
          in: path
          description: Unique transaction identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuscriptionIdResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/sususcription/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/sususcription/sucaab7865dceaff49d8b', [                          
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/sususcription/sucaab7865dceaff49d8b', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);
    delete:
      tags:
        - Subscription
      summary: Remove subscription
      description: This method allows the removal of a subscription associated with a subscription id.
      operationId: deleteSuscriptionById
      parameters:
        - name: id
          in: path
          description: Unique transaction identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteSuscriptionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X DELETE \
            https://BASE_URL/api/sususcription/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('DELETE', 'https:// [base URL]/api/sususcription/sucaab7865dceaff49d8b3, [                          
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              ]           
                  ])->getBody();           
                $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/sususcription/sucaab7865dceaff49d8b', {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

  /api/suinscriptionscards:
    post:
      tags:
        - Subscription
      summary: Affiliate card to subscription
      description: This method allows the insertion of the data of a card for subscription.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardSuscriptionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/suinscriptionscards \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "id": "sucaab7865dceaff49d8b3"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https:// [base URL]/api/suinscriptionscards', [             
                'json' => [       
                  'id' => sucaab7865dceaff49d8b3,             
                  ],             
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              ]           
                  ])->getBody();           
                $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/suinscriptionscards', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              id: "sucaab7865dceaff49d8b3"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: Subscription ID.
                  type: string
                  example: sucaab7865dceaff49d8b3
              required:
                - id

  /api/suplan:
    post:
      tags:
        - Subscription
      summary: Insert the data of a plan.
      description: This method allows the insertion of data for the creation of a plan.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/suplan \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "name": "Test plan",
                "description": "Test Plan"
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https:// [base URL]/api/suplan', [             
                'json' => [       
                  'name' => 'Test plan',    
                  'description' => 'Test Plan'         
                  ],             
                  'headers' => [                 
                    'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              ]           
                  ])->getBody();           
                $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/suplan', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              name: "Test plan",
              description: "Test Plan"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Plan name.
                  type: string
                  example: Test plan
                description:
                  description: Plan description.
                  type: string
                  example: Test Plan
              required:
                - name

  /api/suplan/{idPlan}:
    get:
      tags:
        - Subscription
      summary: Check plan data
      description: This method allows to obtain the details of a plan.
      operationId: getPlanById
      parameters:
        - name: id
          in: path
          description: Unique plan identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanIdResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/suplan/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/suplan/pl29f6ad69fbd594148c39', [                    
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/suplan/pl29f6ad69fbd594148c39', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

  /api/suplan/plans:
    get:
      tags:
        - Subscription
      summary: Check data from all plans
      description: This method allows to obtain the details of all the plans.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanAllResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/suplan/plans \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Sign: SIGN'  \  
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/suplan/plans', [                       
                'headers' => [                 
                  'Sign' => '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/suplan/plans', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Sign': '0d04820b87c80f79a89235fcd256d9b6cddee2fc15fa50034c1903370f3de8c6',                 
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

  /urlnotifysuscription:
    post:
      tags:
        - Subscription
      summary: "url Callback subscription notification"
      description: |
        After activating the subscription by the user, payku will notify the merchant, the result of the operation (status), making a post request to the subscription notification url previously provided in the creation of the subscription and in turn deliver a series of data for internal validations by the merchant application, the subscription id which corresponds to the unique identifier in payku. This data will allow the merchant to know the status of their subscriptions and back them up in their database.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotifySuscriptionResponse"

  /urlnotifypayment:
    post:
      tags:
        - Subscription
      summary: "url Callback payment notification"
      description: |
        After charging the subscription automatically, payku will notify the merchant, the result of the operation (status), making a post request to the payment notification url previously provided in the creation of the subscription and in turn deliver a data series for internal validations by the merchant application, the transactionn_id which corresponds to the unique identifier in payku and a verification_key, which corresponds to a unique validation hash per transaction. These data will allow the merchant to know the status of their transactions and back them up in their database.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotifyPaymentResponse"

  /api/transaction:
    post:
      tags:
        - Transaction
      summary: Generate a transaction
      description:
        This method allows to create a payment order to **Payku** and receives as a response the **URL** to redirect the payer's browser and the **token** that identifies the transaction.
        Once the payer makes the successful payment, **Payku** will notify the result to the page of the business that was sent in the **urlnotify** parameter.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "cURL"
          source: |
            curl -X POST \
            https://BASE-URL/api/transaction \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN-PUBLICO' \
            -H 'Content-Type: application/json,application/json' \
            -H 'Host: BASE-URL' \
            -d '{
              "email": "test@domain.com",
              "order": 5696
              "subject": "Cliente Test",
              "amount": 25000,
              "payment": 1,
              "urlreturn": "https://youwebsite.com/urlreturn?orderClient=123",
              "urlnotify": "https://youwebsite.com/urlnotify?orderClient=123"
            }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/transaction', [
                'json' => [                
                  'email' => 'joedoe@gmail.cl', 
                  'order' => 98745, 
                  'subject' => 'Client Test',
                  'amount' => 25000,  
                  'payment' => 1, 
                  'urlreturn' => 'https://youwebsite.com/urlreturn?orderClient=123',
                  'urlnotify' => 'https://youwebsite.com/urlnotify?orderClient=123'
                  ],  
                'headers' => [                                  
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/transaction', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',                 
                  'Authorization': 'Bearer 3952097d617679f98c587bad0b3a781d'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              email: "joedoe@gmail.com",
              order: 98745,
              subject: "test subject",
              amount: 25000,
              payment: 1,
              urlreturn: "https://youwebsite.com/urlreturn?orderClient=123",
              urlnotify: "https://youwebsite.com/urlnotify?orderClient=123"
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Client email.
                  type: string
                  format: email
                  example: joedoe@gmail.com
                order:
                  description: Trade order.
                  type: integer
                  example: 98745
                subject:
                  description: Description of the order.
                  type: string
                  example: test subject
                amount:
                  description: Order amount.
                  type: integer
                  example: 25000
                payment:
                  description: |
                    Identifier of the payment method. If the identifier is sent, the payer will be redirected directly to the indicated means of payment.
                    - 1 Webpay
                    - 2 Kiphu
                    - 3 Multicaja Efectivo
                    - 4 Multicaja Transferencia
                    - 5 Onepay
                    - 6 Pago46
                    - 7 Sweetpay
                    - 9 Mach
                    - 99 Todos
                  type: integer
                  example: 1
                urlreturn:
                  description: return url of the trade where payku will redirect the payer.
                  type: string
                  format: url
                  example: https://youwebsite.com/urlreturn?orderClient=123
                urlnotify:
                  description: Callback url of the business where payku will notify the payment.
                  type: string
                  format: url
                  example: https://youwebsite.com/urlnotify?orderClient=123
              required:
                - email
                - order
                - subject
                - amount

    get:
      tags:
        - Transaction
      summary: "Get the status of multiple payments"
      description: "This method allows obtaining the information of the payments made in Payku, this method allows a pagination with a maximum of 100 records per page, in addition, it has a date filter, if this parameter is not entered, the current date will be taken, for the pagination It is necessary to add the following at the end of the endpoint? page = 1 & per_page = 100 being the first parameter the page number and the second the number of records per page and for the date filter you must add & date = 2020-10-20 this It will be the date from where the search for transactions will start."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentifierAllResponse"
        "400":
          description: Request error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400get"
        "401":
          description: Wrong Public Token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
        "404":
          description: Identifier does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error404"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE-URL/api/transaction  \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN-PUBLICO' \
            -H 'Content-Type: application/json,application/json' \
            -H 'Host: BASE-URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/transaction', [
                'headers' => [                                  
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/transaction', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',                 
                  'Authorization': 'Bearer 3952097d617679f98c587bad0b3a781d'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request();

  /api/transaction/{idTrasaction}:
    get:
      tags:
        - Transaction
      summary: "Get status of a payment"
      description: "This method allows you to obtain the information of a payment made in **Payku**"
      operationId: getTransactionById
      parameters:
        - name: id
          in: path
          description: id of the transaction to request
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentifierResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400get"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
        "404":
          description: Identifier does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error404"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE-URL/api/transaction/ID-IDENTIFICADOR  \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN-PUBLICO' \
            -H 'Content-Type: application/json,application/json' \
            -H 'Host: BASE-URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/transaction/10ac494c1d8da71d98ea', [
                'headers' => [                                  
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/transaction/10ac494c1d8da71d98ea', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',                 
                  'Authorization': 'Bearer 3952097d617679f98c587bad0b3a781d'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request();

  /api/verificar:
    post:
      tags:
        - Transaction
      summary: "url Callback Transaction"
      description: |
        After the payment has been made by the user, payku will notify the merchant, the result of the operation (status), invoking the urlnotify previously provided in the creation of the payment and in turn will deliver a series of data for internal validations by the application of the trade, such as the order for the transaction to be identified in your system, the transaction_id which corresponds to the unique identifier in payku and a verification_key, which corresponds to a unique validation hash per transaction.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotifyPaymentResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"

  /api/event:
    post:
      tags:
        - Event
      summary: Create an event
      description: This method allows you to create an event and receive the event details as a response.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventCreateResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
              https://BASE_URL/api/event \
              -H 'Accept: application/json, text/plain, */*' \
              -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
              -H 'Content-Type: application/json,application/json' \   
              -H 'Host: BASE_URL' \   
              -d {     
                "name": "Event",     
                "event": "98374",     
                "date_event": "2020-12-20",     
                "date_payment": "2020-12-22",     
                "date_closing_sales": "2020-12-19 23:59:00",     
                "url_logo": "https://example.cl/logo_event1.png",     
                "url_event": "https://payku.cl/event1",     
                "service_sale": 10,     
                "affiliation": [
                  ["afiliate1@gmail.com",  50], 
                  ["afiliate2@gmail.com",  50]
                ] 
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/event', [
                'json' => [                
                    'name' => 'Event',     
                    'event' => '98374',     
                    'date_event' => '2020-12-20',     
                    'date_payment' => '2020-12-22',     
                    'date_closing_sales' => '2020-12-19 23:59:00',     
                    'url_logo' => 'https://example.cl/logo_event1.png',     
                    'url_event' => 'https://payku.cl/event1',     
                    'service_sale' => 10,     
                    'affiliation' => [
                      ['afiliate1@gmail.com',  50], 
                      ['afiliate2@gmail.com',  50]
                    ]
                  ],  
                'headers' => [                                  
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/event', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',                 
                  'Authorization': 'Bearer 3952097d617679f98c587bad0b3a781d'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              name: "Event",     
              event: "98374",     
              date_event: "2020-12-20",     
              date_payment: "2020-12-22",     
              date_closing_sales: "2020-12-19 23:59:00",     
              url_logo: "https://example.cl/logo_event1.png",     
              url_event: "https://payku.cl/event1",     
              service_sale: 10,     
              affiliation: [
                ["afiliate1@gmail.com",  50], 
                ["afiliate2@gmail.com",  50]
              ]
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  description: Event id.
                  type: string
                  example: "98374"
                name:
                  description: Event name.
                  type: string
                  example: "Event"
                date_event:
                  description: Date on which the event will take place.
                  type: datetime
                  example: "2020-12-20"
                date_closing_sales:
                  description: Sales closing date, must be less than or equal to date_event.
                  type: datetime
                  example: "2020-12-19 23:59:00"
                date_payment:
                  description: Payment date of the event, must be greater than the date_event date.
                  type: datetime
                  example: "2020-12-20"
                url_event:
                  description: url where the event is published.
                  type: string
                  format: url
                  example: https://example.cl/event1
                url_logo:
                  description: url of the logo that identifies the event.
                  type: string
                  format: url
                  example: https://example.cl/logo_event1.png
                service_sale:
                  description: Amount of the sales service, belongs to the amount that the owner of the account will receive per transaction.
                  type: integer
                  example: 10
                affiliaction:
                  type: array
                  description: Distribution of beneficiaries.
                  items:
                    type: object
                    description: Collection object for a collection batch.
                    properties:
                      email:
                        type: string
                        description: Beneficiary email.
                        example: "afiliate1@domain.com"
                      percent:
                        type: number
                        description: Percentage which corresponds to the beneficiary.
                        example: "100"
              required:
                - event
                - name
                - date_event
                - date_closing_sales
                - date_payment

  /api/event/{idEvent}:
    get:
      tags:
        - Event
      summary: Get event details
      description: This method allows obtaining the details of an event.
      operationId: getEventById
      parameters:
        - name: id
          in: path
          description: id of the event to request
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventIdResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
              https://BASE_URL/api/event \
              -H 'Accept: application/json, text/plain, */*' \
              -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
              -H 'Content-Type: application/json,application/json' \   
              -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/event/98374', [  
                'headers' => [                                  
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/event/98374', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',                 
                  'Authorization': 'Bearer 3952097d617679f98c587bad0b3a781d'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request(data);

  /api/maclient:
    post:
      tags:
        - Marketplace
      summary: Inserting a client
      description: This method allows the insertion of client data.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminClientMarketResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/maclient \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "email": "joedoe@gmail.com",
                "name": "Joe Doe",
                "phone": "923122312",
                "bank": {
                  "sbif": "1234",
                  "type": "1",
                  "num": "12312313121",
                  "rut": "111111111"
                }
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/maclient', [
                'json' => [                
                  'email' => 'joedoe@gmail.com', 
                  'name' => 'Joe Doe', 
                  'phone' => '923122312', 
                  'bank' => [
                    "sbif" => "0001 ",
                    "type" => "1",
                    "num" => "1231123567",
                    "rut" => "111111111",
                  ]
                ],  
                'headers' => [                 
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/maclient', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',              
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              email: "joedoe@gmail.com",
              name: "Joe Doe",
              phone: "923122312",
              bank: {
                sbif: "1234",
                type: "1",
                num: "12312313121",
                rut: "111111111"
              }
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Client email.
                  type: string
                  format: email
                  example: joedoe@gmail.com
                name:
                  description: Client name
                  type: string
                  example: "Joe Doe"
                phone:
                  description: Client phone.
                  type: string
                  example: "923122312"
                bank:
                  type: object
                  properties:
                    sbif:
                      description: |
                        Bank code to which the bank account belongs.
                        - 0001 Banco de Chile
                        - 0009 Banco Internacional
                        - 0014 Scotiabank Chile
                        - 0016 Banco de crÃ©dito e inversiones (BCI)
                        - 0027 Banco Corpbanca
                        - 0028 Banco Bice
                        - 0031 HSBC Bank Chile
                        - 0037 Banco Santander Chile
                        - 0039 ItaÃº Corpbanca
                        - 0049 Banco Security
                        - 0051 Banco Falabella
                        - 0053 Banco Ripley
                        - 0054 Rabobank Chile
                        - 0055 Banco Consorcio
                        - 0056 Banco Penta
                        - 0057 Banco Paris
                        - 0504 Banco Bilbao Vizcaya Argentaria Chile (BBVA)
                        - 0059 Banco BTG Pactual Chile
                      type: string
                      example: "0001"
                    type:
                      description: |
                        Account type.
                        - 1 Checking account 
                        - 2 Vista/Cuenta RUT 
                        - 3 Saving account
                      type: string
                      example: "1"
                    num:
                      description: Client's account number.
                      type: string
                      example: "12312313121"
                    rut:
                      description: Single Tax Registry.
                      type: string
                      example: "111111111"
                  required:
                    - sbif
                    - type
                    - num
                    - rut
              required:
                - email
                - name
                - phone
                - bank

  /api/maclient/{idClient}:
    get:
      tags:
        - Marketplace
      summary: Query client data
      description: This method allows obtaining the details of a client.
      operationId: getClientMarketById
      parameters:
        - name: id
          in: path
          description: Unique identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminClientMarketResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/maclient/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/maclient/madb93fc00a2cf6f4449', [                    
                'headers' => [                    
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/maclient/madb93fc00a2cf6f4449', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',              
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request();
    delete:
      tags:
        - Marketplace
      summary: Delete client
      description: This method allows the removal of a client associated with an id.
      operationId: getClientDeleteById
      parameters:
        - name: id
          in: path
          description: Unique customer identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteClientMarketResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X DELETE \
            https://BASE_URL/api/maclient/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('DELETE', 'https:// [base URL]/api/maclient/madb93fc00a2cf6f4449', [                 
                  'headers' => [                                 
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              ]           
                  ])->getBody();           
                $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/maclient/madb93fc00a2cf6f4449', {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',              
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request();

  /api/maaffiliation:
    post:
      tags:
        - Marketplace
      summary: Manage Memberships
      description: This method allows you to register the data for membership.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminAffiliationResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X POST \
            https://BASE_URL/api/maaffiliation \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \   
            -d {     
                "name": "name",
                "percentage": "20",
                "affiliation": [
                  ["ma9fd16221a9645b0036","80"]
                ]
              }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/maclient', [
                'json' => [                
                  'name' => 'name', 
                  'percentage' => '20',  
                  'affiliation' => [
                    [ma9fd16221a9645b0036,80]
                  ]
                ],  
                'headers' => [                                
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/maaffiliation', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',              
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              name: "name",
              percentage: "20",
              affiliation: [
                ["ma9fd16221a9645b0036","80"]
              ]
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Membership name.
                  type: string
                  example: name
                percentage:
                  description: Percentage corresponding to the payku user.
                  type: string
                  example: "20"
                affiliation:
                  type: array
                  description: Array containing customers, each customer is an array containing a customer identifier created by payku and the percentage that it will get.
                  example:
                    - ["madb93fc00a2cf6f4449", "80"]
              required:
                - name
                - percentage
                - affiliation

  /api/maaffiliation/{idClient}:
    get:
      tags:
        - Marketplace
      summary: Check membership data
      description: This method allows you to obtain the details of an membership.
      operationId: getAffiliationById
      parameters:
        - name: id
          in: path
          description: Unique membership identifier for payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminAffiliationResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Event"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X GET \
            https://BASE_URL/api/maaffiliation/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('GET', 'https://[base URL]/api/maaffiliation/sucaab7865dceaff49d8b3', [                    
                'headers' => [                                  
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/maaffiliation/sucaab7865dceaff49d8b3', {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',              
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request();

    delete:
      tags:
        - Marketplace
      summary: Remove membership
      description: This method allows the removal of an membership associated with an id.
      operationId: getAffiliationDeleteById
      parameters:
        - name: id
          in: path
          description: Unique client identifier per payku.
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAffiliationResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "CURL"
          source: |
            curl -X DELETE \
            https://BASE_URL/api/maaffiliation/id \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN_PUBLICO'  \   
            -H 'Content-Type: application/json,application/json' \   
            -H 'Host: BASE_URL' \
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('DELETE', 'https:// [base URL]/api/maclient/madb93fc00a2cf6f4449', [                 
                  'headers' => [                                  
                    'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              ]           
                  ])->getBody();           
                $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async () => {
              const response = await fetch('https://[base URL]/api/maaffiliation/sucaab7865dceaff49d8b3', {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',              
                  'Authorization': 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'  
                },
              });
              const result = await response.json();
              console.log(result)
            }

            request();

  /api/transaction/:
    post:
      tags:
        - Marketplace
      summary: Generate a Marketplace transaction
      description:
        This method allows to create a payment order to **Payku** and receives as a response the **URL** to redirect the payer's browser and the **token** that identifies the transaction.
        Once the payer makes the successful payment, **Payku** will notify the result to the page of the business that was sent in the **urlnotify** parameter.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "400":
          description: Request failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "401":
          description: Incorrect public token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
      x-codeSamples:
        - lang: "cURL"
          source: |
            curl -X POST \
            https://BASE-URL/api/transaction \
            -H 'Accept: application/json, text/plain, */*' \
            -H 'Authorization: Bearer TOKEN-PUBLICO' \
            -H 'Content-Type: application/json,application/json' \
            -H 'Host: BASE-URL' \
            -d '{
              "email": "test@domain.com",
              "order": 5696
              "subject": "Cliente Test",
              "amount": 25000,
              "payment": 1,
              "urlreturn": "https://youwebsite.com/urlreturn?orderClient=123",
              "urlnotify": "https://youwebsite.com/urlnotify?orderClient=123",
              "marketplace": "c1c879f4862d393ea6b326a313022dd98f0baa2869d3e9095c124199c9941030"
            }'
        - lang: "PHP"
          source: |
            $client = new \GuzzleHttp\Client();         
              $body = $client->request('POST', 'https://[base URL]/api/transaction', [
                'json' => [                
                  'email' => 'joedoe@gmail.cl', 
                  'order' => 98745, 
                  'subject' => 'Client Test',
                  'amount' => 25000,  
                  'payment' => 1, 
                  'urlreturn' => 'https://youwebsite.com/urlreturn?orderClient=123',
                  'urlnotify' => 'https://youwebsite.com/urlnotify?orderClient=123',
                  'marketplace' => 'c1c879f4862d393ea6b326a313022dd98f0baa2869d3e9095c124199c9941030'
                  ],  
                'headers' => [                                  
                  'Authorization' => 'Bearer 8c872egfdg996f8b418c872e996f8b418c872e996f8b41'              
                ]           
              ])->getBody();           
            $response = json_decode($body);
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://[base URL]/api/transaction', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',                 
                  'Authorization': 'Bearer 3952097d617679f98c587bad0b3a781d'  
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              email: "joedoe@gmail.com",
              order: 98745,
              subject: "test subject",
              amount: 25000,
              payment: 1,
              urlreturn: "https://youwebsite.com/urlreturn?orderClient=123",
              urlnotify: "https://youwebsite.com/urlnotify?orderClient=123",
              marketplace: c1c879f4862d393ea6b326a313022dd98f0baa2869d3e9095c124199c9941030
            };

            request(data);
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Client email.
                  type: string
                  format: email
                  example: joedoe@gmail.com
                order:
                  description: Trade order.
                  type: integer
                  example: 98745
                subject:
                  description: Description of the order.
                  type: string
                  example: test subject
                amount:
                  description: Order amount.
                  type: integer
                  example: 25000
                payment:
                  description: |
                    Identifier of the payment method. If the identifier is sent, the payer will be redirected directly to the indicated means of payment.
                    - 1 Webpay
                    - 2 Kiphu
                    - 3 Multicaja Efectivo
                    - 4 Multicaja Transferencia
                    - 5 Onepay
                    - 6 Pago46
                    - 7 Sweetpay
                    - 9 Mach
                    - 99 Todos
                  type: integer
                  example: 1
                urlreturn:
                  description: return url of the trade where payku will redirect the payer.
                  type: string
                  format: url
                  example: https://youwebsite.com/urlreturn?orderClient=123
                urlnotify:
                  description: Callback url of the business where payku will notify the payment.
                  type: string
                  format: url
                  example: https://youwebsite.com/urlnotify?orderClient=123
                marketplace:
                  description: Mandatory attribute to make transactions to Marketplace affiliation, this consists of the token of the marketplace affiliation to which you want to carry out the transaction.
                  type: string
                  example: c1c879f4862d393ea6b326a313022dd98f0baa2869d3e9095c124199c9941030
              required:
                - email
                - order
                - subject
                - amount
components:
  schemas:
    AdminClientResponse:
      description: "Return data from a client insert"
      type: object
      properties:
        status:
          description: Client status.
          type: string
          example: "active"
        id:
          type: string
          description: Identifier of the transaction created by payku.
          example: "cl0be4c8e623c167bc8b29"
        name:
          type: string
          description: Client name.
          example: "Joe Doe"
        phone:
          type: string
          description: Client phone.
          example: "923122312"
        email:
          type: string
          description: Client email.
          example: "joedoe@gmail.com"
        address:
          description: Client address.
          type: string
          example: "Moneda 101"
        country:
          description: Client country.
          type: string
          example: "Chile"
        region:
          description: Client region.
          type: string
          example: "Metropolitana"
        city:
          description: Client city.
          type: string
          example: "Santiago"
        postal_code:
          description: Client Zip Code.
          type: string
          example: "850000"
        create_at:
          description: Registration date.
          type: string
          example: "2020-09-29"
          format: datetime
        update_at:
          description: Update date.
          type: string
          example: null
          format: datetime
        subcriptions:
          description: Client subscriptions.
          type: object
          example: null

    ClientIdResponse:
      description: "Return data from a client insert"
      type: object
      properties:
        status:
          description: Client status.
          type: string
          example: "active"
        id:
          type: string
          description: Identifier of the transaction created by payku.
          example: "cl0be4c8e623c167bc8b29"
        name:
          type: string
          description: Client name.
          example: "Joe Doe"
        phone:
          type: string
          description: Client phone.
          example: "923122312"
        email:
          type: string
          description: Client email.
          example: "joedoe@gmail.com"
        address:
          description: Client address.
          type: string
          example: "Moneda 101"
        city:
          description: Client city.
          type: string
          example: "Santiago"
        region:
          description: Client region.
          type: string
          example: "Metropolitana"
        country:
          description: Client country.
          type: string
          example: "Chile"
        postal_code:
          description: Client Zip Code.
          type: string
          example: "850000"
        create_at:
          description: Registration date.
          type: string
          example: "2020-09-29"
          format: datetime
        update_at:
          description: Update date.
          type: string
          example: null
          format: datetime
        subcriptions:
          type: object
          properties:
            id:
              description: Subscription identifier created by payku.
              type: string
              example: "su867f07772aa5f5175527"
            created_at:
              description: Registration date.
              type: string
              example: "2020-09-29 19:58:35"
              format: datetime
            status:
              description: |
                Subscription status. The possible statuses you can get are the following:
                - register   
                - active     
                - finish   
                - delete    
                - cancel
                - suspended
              type: string
              example: "active"
            plan:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Identifier of the plan created by payku.
                    type: string
                    example: "pl9697fb170834ad42dd00"
                  name:
                    description: Plan name.
                    type: string
                    example: "test plan"
                  currency:
                    description: Currency.
                    type: string
                    example: "CLP"
            cards:
              type: array
              items:
                type: object
                properties:
                  last_4_digits:
                    description: Last 4 digits of the affiliated card.
                    type: string
                    example: "6622"
                  card_type:
                    description: Card type.
                    type: string
                    example: "Visa"
            transactions:
              type: array
              items:
                type: object
                properties:
                  created_at:
                    description: Transaction creation date.
                    type: string
                    example: "2020-09-30 19:58:35"
                  date_payment:
                    description: Date the transaction was made.
                    type: string
                    example: "2020-09-30"
                  amount:
                    description: Transaction amount.
                    type: string
                    example: "10000"
                  transaction:
                    description: Transaction number.
                    type: string
                    example: "204444"
                  authorization_code:
                    description: Authorization code.
                    type: string
                    example: "1234"
                  order:
                    description: Number of order.
                    type: string
                    example: "001"
                  description:
                    description: Description.
                    type: string
                    example: "description"
                  status:
                    description: |
                      Transaction status The possible statuses you can get are the following:
                      - pending
                      - success
                      - retry
                      - canceled by customer
                      - canceled by paymaster
                      - canceled by payku
                      - maximum attempt limit
                      - first payment rejected
                      - payment consumes failed
                    type: string
                    example: "success"

    ModifyClientResponse:
      description: "Return data from the modification of a client"
      type: object
      properties:
        status:
          description: Client status.
          type: string
          example: "active"
        id:
          type: string
          description: Transaction identifier created by payku.
          example: "cl0be4c8e623c167bc8b29"
        name:
          type: string
          description: Client name.
          example: "Joe Doe Doe"
        phone:
          type: string
          description: Client phone.
          example: "923122312"
        email:
          type: string
          description: Client email.
          example: "joedoe@gmail.com"
        address:
          description: Client address.
          type: string
          example: "Moneda 121"
        city:
          description: Client city.
          type: string
          example: "Santiago"
        region:
          description: Client region.
          type: string
          example: "Metropolitana"
        country:
          description: Client country.
          type: string
          example: "Chile"
        postal_code:
          description: Client Zip Code.
          type: string
          example: "750000"
        create_at:
          description: Registration date.
          type: string
          example: "2020-09-29"
          format: datetime
        update_at:
          description: Update date.
          type: string
          example: "2020-10-2 08:32:52"
          format: datetime
        subcriptions:
          type: object
          properties:
            id:
              description: Subscription identifier created by payku.
              type: string
              example: "su867f07772aa5f5175527"
            created_at:
              description: Registration date.
              type: string
              example: "2020-09-29 19:58:35"
              format: datetime
            status:
              description: |
                Subscription status. The possible statuses you can get are the following:
                - register   
                - active     
                - finish   
                - delete    
                - cancel
                - suspended
              type: string
              example: "active"
            plan:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Identifier of the plan created by payku.
                    type: string
                    example: "pl9697fb170834ad42dd00"
                  name:
                    description: Plan name.
                    type: string
                    example: "test plan"
                  currency:
                    description: currency.
                    type: string
                    example: "CLP"
            cards:
              type: array
              items:
                type: object
                properties:
                  last_4_digits:
                    description: Last 4 digits of the affiliated card.
                    type: string
                    example: "6622"
                  card_type:
                    description: Card type.
                    type: string
                    example: "Visa"
            transactions:
              type: array
              items:
                type: object
                properties:
                  created_at:
                    description: Transaction creation date.
                    type: string
                    example: "2020-09-30 19:58:35"
                  date_payment:
                    description: Date the transaction was made.
                    type: string
                    example: "2020-09-30"
                  amount:
                    description: Transaction amount.
                    type: string
                    example: "10000"
                  transaction:
                    description: Transaction number.
                    type: string
                    example: "204444"
                  authorization_code:
                    description: Authorization code.
                    type: string
                    example: "1234"
                  order:
                    description: Number of order.
                    type: string
                    example: "001"
                  description:
                    description: Description.
                    type: string
                    example: "description"
                  status:
                    description: |
                      Transaction status The possible statuses you can get are the following:
                      - pending
                      - success
                      - retry
                      - canceled by customer
                      - canceled by paymaster
                      - canceled by payku
                      - maximum attempt limit
                      - first payment rejected
                      - payment consumes failed
                    type: string
                    example: "success"

    DeleteClientResponse:
      description: "Return data deleting a client"
      type: object
      properties:
        status:
          type: string
          description: Client status.
          example: "success"
        id:
          type: string
          description: Transaction identifier created by payku.
          example: "cl0be4c8e623c167bc8b29"

    DeleteClientMarketResponse:
      description: "Return data deleting a client"
      type: object
      properties:
        status:
          type: string
          description: Client status.
          example: "suspended"
        id:
          type: string
          description: Transaction identifier created by payku.
          example: "madb93fc00a2cf6f4449"

    DeleteAffiliationResponse:
      description: "Return data deleting a membership"
      type: object
      properties:
        status:
          type: string
          description: Membership status.
          example: "suspended"
        id:
          type: string
          description: Transaction identifier created by payku.
          example: "eecd92fdbb8bf615e821"

    PlanResponse:
      description: "Return data from inserting a plan"
      type: object
      properties:
        status:
          type: string
          description: Status.
          example: "success"
        id:
          type: string
          description: Unique plan identifier per payku.
          example: "pl4293e97a87195bb9edcd"

    DeleteSuscriptionResponse:
      description: "Return data from the deletion of a subscription"
      type: object
      properties:
        id:
          type: string
          description: Transaction identifier created by payku.
          example: "sucaab7865dceaff49d8b3"
        status:
          type: string
          description: Status.
          example: "success"

    CreateSuscriptionResponse:
      description: "Return data from the insertion of data from a subscription"
      type: object
      properties:
        status:
          type: string
          description: Status.
          example: "register"
        id:
          type: string
          description: Unique subscription identifier for payku.
          example: "sucaab7865dceaff49d8b3"
        url:
          type: string
          description: Url payment and subscription activation.
          example: "http://app.payku.cl/gateway/registrosuscripcion?tipoplan=2&plan=true&token=219&validacion=e6c50ba0e0"

    PlanIdResponse:
      description: "Plan query return data by id"
      type: object
      properties:
        status:
          type: string
          description: Status.
          example: "success"
        plans:
          type: object
          properties:
            id:
              description: Unique plan identifier per payku.
              type: string
              example: "pl4293e97a87195bb9edcd"
            status:
              description: Plan status.
              type: string
              example: "active"
            name:
              description: Plan name.
              type: string
              example: "Test plan"
            code:
              description: Plan code.
              type: string
              example: "001"
            description:
              description: Plan description.
              type: string
              example: "Test Plan"
            url_notify_payment:
              description:
              type: string
              example: ""
              format: url
            url_notify_suscription:
              description:
              type: string
              example: ""
              format: url
            total_suscription:
              description: Total subscriptions.
              type: integer
              example: 0
            total_suscription_active:
              description: Total active subscriptions.
              type: integer
              example: 0

    PlanAllResponse:
      description: "Plan query return data by id"
      type: object
      properties:
        status:
          type: string
          description: Status.
          example: "success"
        plans:
          type: array
          items:
            type: object
            properties:
              id:
                description: Unique plan identifier per payku.
                type: string
                example: "pl4293e97a87195bb9edcd"
              status:
                description: Plan status.
                type: string
                example: "active"
              name:
                description: Plan name.
                type: string
                example: "Test plan"
              code:
                description: Plan code.
                type: string
                example: "001"
              description:
                description: Plan description.
                type: string
                example: "Test Plan"
              url_notify_payment:
                description:
                type: string
                example: ""
                format: url
              url_notify_suscription:
                description:
                type: string
                example: ""
                format: url
              total_suscription:
                description: Total subscriptions.
                type: integer
                example: 0
              total_suscription_active:
                description: Total active subscriptions.
                type: integer
                example: 0

    CreateSuTransactionResponse:
      description: "Return data from the insertion of data from a subscription"
      type: object
      properties:
        status:
          description: |
            Transaction status The possible statuses you can get are the following:
            - pending           
            - success           
            - rejected         
            - refunded partial  
            - refunded
          type: string
          example: success
        order:
          description: Order.
          type: string
          example: "001"
        amount:
          description: Amount.
          type: string
          example: "10000"
        transaction:
          description: Transaction number.
          type: string
          example: "204444"
        verification_key:
          description:
          type: string
          example: "025dcad37e071daa8bfc2df35189009db65692a4ff766856108be1675e870839"

    CardSuscriptionResponse:
      description: "Return data from data insertion of a card"
      type: object
      properties:
        status:
          description: Status.
          type: string
          example: success
        id:
          description: Unique subscription identifier for payku.
          type: string
          example: sucaab7865dceaff49d8b3
        url:
          description: URL paid and subscription activation.
          type: string
          example: http://127.0.0.2/gateway/registrosuscripcion?plan=true&token=246&validacion=d6b32 8e57c&tarjetaadicional=true

    SuscriptionIdResponse:
      description: "Return data from the query of a subscription"
      type: object
      properties:
        id:
          type: string
          description: Subscription identifier created by payku.
          example: "sucaab7865dceaff49d8b7"
        status:
          type: string
          description: |
            Subscription status. The possible statuses you can get are the following:
             - register   
             - active     
             - finish   
             - delete    
             - cancel
             - suspended
          example: "active"
        start:
          type: string
          description: Subscription start date.
          example: "2019-07-22 18:34:49"
        end:
          type: string
          description: Subscription termination date.
          example: "2020-06-12 00:00:00"
        client:
          type: object
          properties:
            id:
              description: Client identifier created by payku.
              type: string
              example: "su7e5e1c0b1bd2e37ec557"
            name:
              description: Client name.
              type: string
              example: "name"
            email:
              description: Client email.
              type: string
              example: "example@domain.com"
            rut:
              description: Unique Roll Tributary.
              type: string
              example: "1.111.111-1"
            phone:
              description: Client phone.
              type: string
              example: "example@domain.com"
            parametros:
              description:
              type: array
        plan:
          type: object
          properties:
            id:
              description: Identifier of the plan created by payku.
              type: string
              example: "pl9697fb170834ad42dd00"
            name:
              description: Plan name.
              type: string
              example: "test plan"
            currency:
              description: Currency.
              type: string
              example: "CLP"
        cards:
          type: object
          properties:
            last_4_digits:
              description: Last 4 digits of the affiliated card.
              type: string
              example: "6622"
            card_type:
              description: Card type.
              type: string
              example: "Visa"
        transactions:
          type: array
          items:
            type: object
            properties:
              created_at:
                description: Transaction creation date.
                type: string
                example: "2020-09-30 19:58:35"
              amount:
                description: Transaction amount.
                type: string
                example: "10000"
              transaction:
                description: Transaction number.
                type: string
                example: "204444"
              authorization_code:
                description: Authorization code.
                type: string
                example: "1234"
              order:
                description: Number of order.
                type: string
                example: "001"
              description:
                description: Description.
                type: string
                example: "description"
              status:
                description: |
                  Transaction status The possible statuses you can get are the following:
                  - pending           
                  - success           
                  - rejected         
                  - refunded partial  
                  - refunded
                type: string
                example: "success"

    SuscriptionAllResponse:
      type: object
      properties:
        subscriptions:
          type: array
          items:
            description: "Return data from the query of all subscriptions"
            type: object
            properties:
              id:
                type: string
                description: Subscription identifier created by payku.
                example: "sucaab7865dceaff49d8b7"
              status:
                type: string
                description: |
                  Subscription status. The possible statuses you can get are the following:
                  - register   
                  - active     
                  - finish   
                  - delete    
                  - cancel
                  - suspended
                example: "active"
              start:
                type: string
                description: Subscription start date.
                example: "2019-07-22 18:34:49"
              end:
                type: string
                description: Subscription termination date.
                example: "2020-06-12 00:00:00"
              client:
                type: object
                properties:
                  id:
                    description: Customer identifier created by payku.
                    type: string
                    example: "su7e5e1c0b1bd2e37ec557"
                  name:
                    description: Customer name.
                    type: string
                    example: "name"
                  email:
                    description: Customer email.
                    type: string
                    example: "example@domain.com"
                  rut:
                    description: Unique Roll Tributary.
                    type: string
                    example: "1.111.111-1"
                  phone:
                    description: Customer phone.
                    type: string
                    example: "56928265454"
                  parametros:
                    description:
                    type: array
              plan:
                type: object
                properties:
                  id:
                    description: Identifier of the plan created by payku.
                    type: string
                    example: "pl9697fb170834ad42dd00"
                  name:
                    description: Plan name.
                    type: string
                    example: "test plan"
                  currency:
                    description: Currency.
                    type: string
                    example: "CLP"
              cards:
                type: object
                properties:
                  last_4_digits:
                    description: Last 4 digits of the affiliated card.
                    type: string
                    example: "6622"
                  card_type:
                    description: Card type.
                    type: string
                    example: "Visa"
              transactions:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      description: Transaction creation date.
                      type: string
                      example: "2020-09-30 19:58:35"
                    amount:
                      description: Transaction amount.
                      type: string
                      example: "10000"
                    transaction:
                      description: Transaction number.
                      type: string
                      example: "204444"
                    authorization_code:
                      description: Authorization code.
                      type: string
                      example: "1234"
                    order:
                      description: Number of order.
                      type: string
                      example: "001"
                    description:
                      description: Description.
                      type: string
                      example: "description"
                    status:
                      description: |
                        Transaction status The possible statuses you can get are the following:
                        - pending           
                        - success           
                        - rejected         
                        - refunded partial  
                        - refunded
                      type: string
                      example: "success"

    TransactionResponse:
      description: "Return data from the creation of a transaction"
      type: object
      properties:
        status:
          type: string
          description: |
            Transaction status The possible statuses you can get are the following:
            - pending           
            - success           
            - rejected         
            - refunded partial  
            - refunded
          example: "pending"
        id:
          type: string
          description: Transaction identifier created by payku.
          example: "clasd12319715c30002ab3ba4dab"
        url:
          type: string
          description: URL to redirect the user.
          example: "https://BASE-URL/url_de_pago"

    IdentifierResponse:
      description: "Status return data of a transaction"
      type: object
      properties:
        id:
          type: string
          description: Transaction identifier created by Payku.
          example: "10ac494c1d8da71d98ea"
        status:
          type: string
          description: |
            Transaction status The possible statuses you can get are the following:
            - pending           
            - success           
            - rejected         
            - refunded partial  
            - refunded
          example: "success"
        created_at:
          type: string
          description: Registration date.
          example: "2019-10-25 14:10:03"
        email:
          type: string
          description: Client email.
          example: "alex@onequark.com"
        amount:
          type: string
          description: Amount.
          example: "98745"
        order:
          type: string
          description: Number of order.
          example: "1572023402"
        subject:
          type: string
          description: Description of the purchase order.
          example: "1572023402"
        payment:
          type: object
          properties:
            start:
              type: string
              description: Inicio de la transacciÃ³n.
              example: "2020-12-16 15:10:33"
            end:
              type: string
              description: Fin de la transacciÃ³n.
              example: "2020-12-16 15:10:36"
            media:
              type: string
              description: Payment method, used by the user.
              example: "Webpay"
            transaction_id:
              type: string
              description: Identifier of the transaction created by payku.
              example: "107999"
            verification_key:
              type: string
              description: Verification code created by Payku.
              example: "6669cbd982ef54c28f2f15fb9dc5262d"
            authorization_code:
              type: string
              description: Authorization code.
              example: "107742"
            last_4_digits:
              type: string
              description: Last 4 digits of the affiliated card.
              example: "1233"
            card_type:
              type: string
              description: Card type.
              example: ""
            currency:
              type: string
              description: Currency.
              example: "CLP"
            subscriptions:
              description: "Object containing subscription information"
              type: object
              properties:
                id:
                  type: string
                  description: Subscription identifier created by Payku.
                  example: "su7a9bb8e59012de9e5289"
                status:
                  type: string
                  description: |
                    Subscription status. The possible statuses you can get are the following:
                    - register   
                    - active     
                    - finish   
                    - delete    
                    - cancel
                    - suspended
                  example: "success"
            gateway_response:
              description: "Object containing transaction response information"
              type: object
              properties:
                status:
                  type: string
                  description: |
                    Transaction status The possible statuses you can get are the following:
                    - pending           
                    - success           
                    - rejected         
                    - refunded partial  
                    - refunded
                  example: "success"
                message:
                  type: string
                  description: |
                    Message describing the status.
                      - successful transaction
                      - Rechazo de transacciÃ³n.
                      - TransacciÃ³n debe reintentarse.
                      - Error en transacciÃ³n.
                      - Rechazo de transacciÃ³n.
                      - Rechazo por error de tasa.
                      - Excede cupo mÃ¡ximo mensual.
                      - Excede lÃ­mite diario por transacciÃ³n.
                      - Rubro no autorizado.
                  example: "successful transaction"

    IdentifierAllResponse:
      type: object
      properties:
        transaction:
          type: array
          items:
            description: "Status return data of a transaction"
            type: object
            properties:
              id:
                type: string
                description: Identifier of the transaction created by Payku.
                example: "10ac494c1d8da71d98ea"
              status:
                type: string
                description: |
                  Transaction status The possible statuses you can get are the following:
                  - pending           
                  - success           
                  - rejected         
                  - refunded partial  
                  - refunded
                example: "success"
              created_at:
                type: string
                description: Registration date.
                example: "2019-10-25 14:10:03"
              email:
                type: string
                description: User email.
                example: "alex@onequark.com"
              amount:
                type: string
                description: Amount.
                example: "98745"
              order:
                type: string
                description: Order number.
                example: "1572023402"
              subject:
                type: string
                description: Description of the purchase order.
                example: "1572023402"
              payment:
                type: object
                properties:
                  start:
                    type: string
                    description: Inicio de la transacciÃ³n.
                    example: "2020-12-16 15:10:33"
                  end:
                    type: string
                    description: Fin de la transacciÃ³n.
                    example: "2020-12-16 15:10:36"
                  media:
                    type: string
                    description: Payment method, used by the user.
                    example: "Webpay"
                  transaction_id:
                    type: string
                    description: Identifier of the transaction created by payku.
                    example: "107999"
                  verification_key:
                    type: string
                    description: Verification code created by Payku.
                    example: "6669cbd982ef54c28f2f15fb9dc5262d"
                  authorization_code:
                    type: string
                    description: Authorization code.
                    example: "107742"
                  last_4_digits:
                    type: string
                    description: Last 4 digits of the affiliated card.
                    example: "1233"
                  card_type:
                    type: string
                    description: Card type.
                    example: ""
                  currency:
                    type: string
                    description: Currency.
                    example: "CLP"
                  subscriptions:
                    description: "Object containing subscription information"
                    type: object
                    properties:
                      id:
                        type: string
                        description: Subscription identifier created by Payku.
                        example: "su7a9bb8e59012de9e5289"
                      status:
                        type: string
                        description: |
                          Subscription status. The possible statuses you can get are the following:
                          - register   
                          - active     
                          - finish   
                          - delete    
                          - cancel
                          - suspended
                        example: "success"
                  gateway_response:
                    description: "Object containing transaction response information"
                    type: object
                    properties:
                      status:
                        type: string
                        description: |
                          Transaction status The possible statuses you can get are the following:
                          - pending           
                          - success           
                          - rejected         
                          - refunded partial  
                          - refunded
                        example: "success"
                      message:
                        type: string
                        description: |
                          Message describing the status.
                            - successful transaction
                            - Rechazo de transacciÃ³n.
                            - TransacciÃ³n debe reintentarse.
                            - Error en transacciÃ³n.
                            - Rechazo de transacciÃ³n.
                            - Rechazo por error de tasa.
                            - Excede cupo mÃ¡ximo mensual.
                            - Excede lÃ­mite diario por transacciÃ³n.
                            - Rubro no autorizado.
                        example: "successful transaction"

    VerificationResponse:
      description: "Return data from the creation of a transaction"
      type: object
      properties:
        order:
          type: string
          description: Transaction identifier created by payku.
          example: "9123123"
        status:
          type: string
          description:
            Successful validation = You will receive the string 'VALID'.
            Validation rejected = You will receive different than 'INVALID'.
          example: "VALID"

    NotifySuscriptionResponse:
      description: "Return data from the activation of a subscription"
      type: object
      properties:
        id:
          type: string
          description: Subscription identifier created by Payku.
          example: "su74866857980c7d2b4306"
        status:
          type: string
          description: |
            Subscription status. The possible statuses you can get are the following:
            - register   
            - active     
            - finish   
            - delete    
            - cancel
            - suspended
          example: "active"

    NotifyPaymentResponse:
      description: "Return data from the payment of a subscription"
      type: object
      properties:
        transaction_id:
          description: Unique transaction identifier by Payku.
          type: number
          example: 9123123
        verification_key:
          description: Unique transaction hash.
          type: string
          example: 2ba83615f863e72sdca5dfd0a6df2782
        order:
          description: Unique transaction identifier sent by the merchant.
          type: string
          example: 1568041684
        status:
          type: string
          description: |
            Transaction status The possible statuses you can get are the following:
            - pending           
            - success           
            - rejected         
            - refunded partial  
            - refunded
          example: "success"

    EventCreateResponse:
      description: "Return data from creating an event"
      type: object
      properties:
        status:
          type: string
          description: Request status.
          example: "success"
        id:
          type: string
          description: Event id.
          example: "98374"
        event:
          type: string
          description: Event name.
          example: "Event"
        date_event:
          type: datetime
          description: Date on which the event will take place.
          example: "2020-12-20"
        date_payment:
          type: datetime
          description: Payment date of the event, must be greater than the date_event date.
          example: "2020-12-22"
        date_closing_sales:
          type: datetime
          description: Sales closing date, must be less than or equal to date_event.
          example: "2020-12-19 23:59:00"
        url_logo:
          type: string
          description: url that belongs to the event.
          format: url
          example: "https://example.cl/logo_event1.png"
        url_event:
          type: string
          description: url where the event is published.
          format: url
          example: "https://payku.cl/event1"
        distribution:
          type: object
          description: Distribution of transactions.
          properties:
            affiliate:
              type: string
              description: Amount to distribute to beneficiaries.
              example: "100.00"
            service_sale:
              type: string
              description: Amount to distribute in the sales service.
              example: "10.00"
        affiliaction:
          type: object
          description: Affiliate information.
          properties:
            id:
              type: string
              description: Beneficiary identifier.
              example: "b99dfd8193ebfd37d4b9"
            email:
              type: string
              description: Beneficiary email.
              example: "afiliate1@domain.com"
            percent:
              type: string
              description: Percentage which corresponds to the beneficiary.
              example: "100.00"
            status:
              type: string
              description: Beneficiary status.
              example: "pending"
        paymentData:
          type: object
          description: Distribution of beneficiaries.
          properties:
            count:
              type: number
              description: Sales quantity.
              example: 0
            amount_general:
              type: number
              description: General amount of all transactions.
              example: 0
            amount_affiliate:
              type: number
              description: Amount to distribute to beneficiaries.
              example: 0
            fee:
              type: number
              description: Fee.
              example: 0
            balance:
              type: number
              description: Amount to deposit.
              example: 0

    EventIdResponse:
      description: "Return data from creating an event"
      type: object
      properties:
        id:
          type: string
          description: Event identifier.
          example: "98374"
        event:
          type: string
          description: Event name.
          example: "Event"
        date_event:
          type: datetime
          description: Date on which the event will take place.
          example: "2020-12-20"
        date_payment:
          type: datetime
          description: Payment date of the event, must be greater than the date_event date.
          example: "2020-12-22"
        date_closing_sales:
          type: datetime
          description: Sales closing date, must be less than or equal to date_event.
          example: "2020-12-19 23:59:00"
        url_logo:
          type: string
          description: url logo that belongs to the event.
          format: url
          example: "https://example.cl/logo_event1.png"
        url_event:
          type: string
          description: url that belongs to the event.
          format: url
          example: "https://payku.cl/event1"
        distribution:
          type: object
          description: Distribution of transactions.
          properties:
            affiliate:
              type: string
              description: Amount to distribute to beneficiaries.
              example: "100.00"
            service_sale:
              type: string
              description: Amount to distribute in the sales service.
              example: "10.00"
        affiliaction:
          type: object
          description: Affiliate information.
          properties:
            id:
              type: string
              description: Beneficiary identifier.
              example: "b99dfd8193ebfd37d4b9"
            email:
              type: string
              description: Beneficiary email.
              example: "afiliate1@domain.com"
            percent:
              type: string
              description: Percentage which corresponds to the beneficiary.
              example: "100.00"
            status:
              type: string
              description: Beneficiary status.
              example: "pending"
        paymentData:
          type: object
          description: Distribution of beneficiaries.
          properties:
            count:
              type: number
              description: Sales quantity.
              example: 0
            amount_general:
              type: number
              description: General amount of all transactions.
              example: 0
            amount_affiliate:
              type: number
              description: Amount to distribute to beneficiaries.
              example: 0
            fee:
              type: number
              description: Fee.
              example: 0
            balance:
              type: number
              description: Amount to deposit.
              example: 0

    AdminClientMarketResponse:
      description: "Return data from a client insert"
      type: object
      properties:
        id:
          description: Identifier created by payku.
          type: string
          example: "madb93fc00a2cf6f4449"
        status:
          description: Client status.
          type: string
          example: "register"
        name:
          description: Client name.
          type: string
          example: "Joe Doe"
        phone:
          description: Client phone.
          type: string
          example: "923122312"
        email:
          description: Client email.
          type: string
          format: email
          example: joedoe@gmail.com
        bank:
          type: object
          properties:
            sbif:
              description: Bank code.
              type: string
              example: "1234"
            type:
              description: |
                Account type.
                - 1 Checking account
                - 2 Vista/Cuenta RUT
                - 3 Saving account
              type: string
              example: "1"
            num:
              description: Client's account number.
              type: string
              example: "12312313121"
            rut:
              description: Single Tax Registry.
              type: string
              example: "111111111"
        affiliations:
          description: Number of affiliations.
          type: integer
          example: 0
        created_at:
          description: Registration date.
          type: string
          example: "2020-09-28 20:42:59"
          format: datetime
        update_at:
          description: Update date.
          type: string
          example: "null"
          format: datetime

    AdminAffiliationResponse:
      description: "Return data from the insertion of an affiliate"
      type: object
      properties:
        id:
          description: Unique subscription identifier for payku.
          type: string
          example: "sucaab7865dceaff49d8b3"
        status:
          description: Status.
          type: string
          example: "register"
        name:
          description: Membership name.
          type: string
          example: "name"
        token:
          description: Affiliate Token that is entered into the merchant.
          type: string
          example: "eecd92fdbb8bf615e8215d6fbb30bb6ae6f82c9e1810f85b65bbeb472794c4a4"
        percentage:
          description: Payku user affiliation percentage.
          type: string
          example: "20.00"
        affiliations:
          type: array
          items:
            type: object
            properties:
              id:
                description: Identifier.
                type: string
                example: "ma9fd16221a9645b0036"
              name:
                description: Affiliate name.
                type: string
                example: "name"
              percentage:
                description: Percentage corresponding to each affiliate.
                type: string
                example: "80.00"

    mallPostResponse:
      description: "Return data from the creation of a Mall transaction"
      type: object
      properties:
        status:
          type: string
          description: |
            Transaction status The possible statuses you can get are the following:
            - pending           
            - success           
            - rejected         
            - refunded partial  
            - refunded
          example: "success"
        id:
          type: string
          description: Transaction identifier created by payku.
          example: "malld200058ab44739ddee2adcd2f5"
        url:
          type: string
          description: URL has redirect user.
          example: "https://[base URL]/gateway/mall/malld200058ab44739ddee2adcd2f5"

    IdentifierMallResponse:
      description: "Status return data of a transaction"
      type: object
      properties:
        status:
          type: string
          description: |
            Transaction status The possible statuses you can get are the following:
            - pending           
            - success           
            - rejected         
            - refunded partial  
            - refunded
          example: "success"
        id:
          type: string
          description: Transaction identifier created by Payku.
          example: "malld200058ab44739ddee2adcd2f5"
        created_at:
          type: string
          description: Registration date.
          example: "2020-10-16 11:23:19"
        amount:
          type: string
          description: Amount.
          example: "30000"
        payment:
          type: object
          properties:
            media:
              type: string
              description: Payment method, used by the client.
              example: "Webpay"
            verification_key:
              type: string
              description: Verification code created by Payku.
              example: "d60aaa661ea74d824373806c8aa38137"
            authorization_code:
              type: string
              description: Authorization code.
              example: "441864"
            last_4_digits:
              type: string
              description: Last 4 digits of the affiliated card.
              example: "5135"
            card_type:
              type: string
              description: Card type.
              example: ""
            currency:
              type: string
              description: Currency.
              example: "CLP"

    customerPostResponse:
      description: "Return data from the creation of a Customer transaction"
      type: object
      properties:
        status:
          type: string
          description: Status of the request.
          example: "success"
        usuario:
          type: string
          description: User identifier.
          example: "us500f77e28752dc937e7d"
        cuenta:
          type: string
          description: Account identifier.
          example: "cu245a17e00f7ce3715f5a"

    Error:
      type: object
      properties:
        status:
          type: string
          description: Request status.
          example: failed
        type:
          type: string
          description: Type of error.
          example: Unprocessable Entity
        message_error:
          type: string
          description: Error message.
          example: Array\n(\n    [order] => invalid\n)\n

    Error400:
      type: object
      properties:
        status:
          type: string
          description: Request status.
          example: failed
        type:
          type: string
          description: Type of error.
          example: Unprocessable Entity
        message_error:
          type: string
          description: Error message.
          example: Array\n(\n    [order] => invalid\n)\n

    Error400Event:
      type: object
      properties:
        status:
          type: string
          description: Request status.
          example: failed
        type:
          type: string
          description: Type of error.
          example: Unprocessable Entity
        message_error:
          type: string
          description: Error message.
          example: "Array\n(\n    [event] => is empty\n)\n"

    Error400get:
      type: object
      properties:
        status:
          type: string
          description: Request status.
          example: failed
        type:
          type: string
          description: Type of error.
          example: Unprocessable Entity
        message_error:
          type: string
          description: Error message.
          example: Array\n(\n    [id] => is Empty\n)\n

    Error401:
      type: object
      properties:
        type:
          type: string
          description: Request status.
          example: Unauthorized
        message_error:
          type: object
          properties:
            error:
              type: string
              description: Error message.
              example: waiting token public

    Error404:
      type: object
      properties:
        status:
          type: string
          description: Request status.
          example: failed
        type:
          type: string
          description: Type of error.
          example: Not Found
        id:
          type: string
          description: Id information
          example: is not valid
